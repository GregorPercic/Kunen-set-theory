{-# OPTIONS --prop --rewriting #-}

module logic where
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Primitive
open import Trebor-Huang.Trebor-Huang-logic
open import Trebor-Huang.Trebor-Huang-ZF

-- Because we are trying to work in FOL, I add the classical property of existential import.
postulate
    existential-import :
        (A : Set) โ (P : A โ Prop) โ ((x : A) โ P x) โ โ[ x โ A ] P x

[PโยฌP]โง[ยฌPโP]โโฅ : {P : Prop} โ (P โ ยฌ P) โง (ยฌ P โ P) โ โฅ
[PโยฌP]โง[ยฌPโP]โโฅ [ zig , zag ] = (ฮป x โ zig x x) (zag (ฮป x โ zig x x))

ยฌ[PโงยฌQ]โ[PโQ] : {P Q : Prop} โ ยฌ (P โง ยฌ Q) โ (P โ Q)
ยฌ[PโงยฌQ]โ[PโQ] {P} {Q} hyp p with truth Q
... | injโ yes = โก-true yes
... | injโ no = ex-falso (hyp [ p , โก-false no ])

ยฌPโPโจQโจRโQโจR : {P Q R : Prop} โ ยฌ P โ P โจ Q โจ R โ Q โจ R
ยฌPโPโจQโจRโQโจR {P} {Q} {R} ยฌp (ฮนโ (ฮนโ p)) = ex-falso (ยฌp p)
ยฌPโPโจQโจRโQโจR {P} {Q} {R} ยฌp (ฮนโ (ฮนโ q)) = ฮนโ q
ยฌPโPโจQโจRโQโจR {P} {Q} {R} ยฌp (ฮนโ r) = ฮนโ r
-- solve 1 (ฮป P Q R โ (ยก P ==> P ||| Q ||| R ==> Q ||| R)) P Q R
-- Solver can't handle multiple proposition variables?

DeMorgan-ยฌโง-ยฌยฌโจ : {P Q : Prop} โ ยฌ (P โง Q) โ ยฌ P โจ ยฌ Q
DeMorgan-ยฌโง-ยฌยฌโจ {P} {Q} ยฌ[PโงQ] with truth P | truth Q
... | injโ p | injโ q = ex-falso (ยฌ[PโงQ] [ โก-true p , โก-true q ] )
... | _ | injโ ยฌq = ฮนโ (โก-false ยฌq)
... | injโ ยฌp | _ = ฮนโ (โก-false ยฌp)

ยฌ[PโยฌQ]โPโงQ : {P Q : Prop} โ ยฌ(P โ ยฌ Q) โ P โง Q
ยฌ[PโยฌQ]โPโงQ {P} {Q} ยฌ[pโยฌq] with truth P | truth Q
... | injโ p | injโ q = [ โก-true p , โก-true q ]
... | _ | injโ ยฌq = ex-falso (ยฌ[pโยฌq] (ฮป p โ (โก-false ยฌq)))
... | injโ ยฌp | _ = ex-falso (ยฌ[pโยฌq] (ฮป p โ ex-falso ((โก-false ยฌp) p)))

PโยฌPโจQโQ : {P Q : Prop} โ P โ ยฌ P โจ Q โ Q
PโยฌPโจQโQ p (ฮนโ ยฌp) = ex-falso (ยฌp p)
PโยฌPโจQโQ p (ฮนโ q) = q

ยฌโ-โยฌ : {P : ๐ โ Prop} โ ยฌ (โ[ x โ ๐ ] P x) โ (โ x โ ยฌ P x)
ยฌโ-โยฌ ยฌโ x Px = ยฌโ (exists x Px)

ยฌยฌPโP : {P : Prop} โ ยฌ ยฌ P โ P
ยฌยฌPโP {P} = solve 1 (\ P -> (ยก ยก P ==> P)) P

ยฌโ-โยฌ : {P : ๐ โ Prop} โ ยฌ (โ x โ P x) โ โ[ x โ ๐ ] ยฌ P x
ยฌโ-โยฌ {P} ยฌโ with truth (โ[ x โ ๐ ] ยฌ P x)
... | injโ yes = โก-true yes
... | injโ no = ex-falso (ยฌโ (ฮป x โ ยฌยฌPโP (ยฌโ-โยฌ (โก-false no) x)))

โ-prop-transfer : {P Q : Prop} โ (P โ Q) โ โ[ y โ ๐ ] P โ โ[ y โ ๐ ] Q
โ-prop-transfer pโq (exists y p) = exists y (pโq p)

โ-prop-transfer-param : {P Q : ๐ โ Prop} โ {x : ๐} โ (โ {x} โ P x โ Q x) โ โ[ y โ ๐ ] P x โ โ[ y โ ๐ ] Q x
โ-prop-transfer-param pxโqx (exists y px) = exists y (pxโqx px)

โง-comm : {P Q : Prop} โ P โง Q โ Q โง P
โง-comm [ p , q ] = [ q , p ]

infix 8 _โ_
_โ_ : Prop โ Prop โ Prop
_โ_ P Q = (P โ Q) โง (Q โ P)